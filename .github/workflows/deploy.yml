name: Deploy to EC2

on:
  repository_dispatch:
    types: [new-release]

# on:
#   push:
#     branches:
#       - feature/deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get the app latest versions
        id: versions
        run: |
          if [[ "${{ github.event.client_payload.app }}" == "front-end" ]]; then
            echo "FRONT_VERSION=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
            BACK_VERSION=$(curl -s https://api.github.com/repos/a-deux-pas/back-a-deux-pas/releases/latest | jq -r '.tag_name | select(startswith("v"))')
            echo "BACK_VERSION=${BACK_VERSION#v}" >> $GITHUB_OUTPUT
          else
            FRONT_VERSION=$(curl -s https://api.github.com/repos/a-deux-pas/front-a-deux-pas/releases/latest | jq -r '.tag_name | select(startswith("v"))')
            echo "FRONT_VERSION=${FRONT_VERSION#v}" >> $GITHUB_OUTPUT
            echo "BACK_VERSION=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # - name: Update Docker and Docker Compose on EC2
      #   run: |
      #     ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
      #       sudo apt-get update
      #       sudo apt-get install -y docker.io
      #       sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      #       sudo chmod +x /usr/local/bin/docker-compose
      #     '

      - name: Set Docker permissions on EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo usermod -aG docker $USER && newgrp docker'

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          FRONT_VERSION: ${{ steps.versions.outputs.FRONT_VERSION }}
          BACK_VERSION: ${{ steps.versions.outputs.BACK_VERSION }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          JWT_EXPIRATION_REMEMBER: ${{ secrets.JWT_EXPIRATION_REMEMBER }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
        run: |
          scp docker-compose.yml ${USER}@${HOST}:~/app/
          ssh ${USER}@${HOST} '
            cd ~/app
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
            echo "FRONT_VERSION=${{ env.FRONT_VERSION }}" >> .env
            echo "BACK_VERSION=${{ env.BACK_VERSION }}" >> .env
            echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}" >> .env
            echo "JWT_EXPIRATION_REMEMBER=${{ secrets.JWT_EXPIRATION_REMEMBER }}" >> .env
            echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> .env
            echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
            echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env
            echo "STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}" >> .env
            echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" >> .env
            docker-compose config
            docker-compose pull
            docker-compose up -d
          '
