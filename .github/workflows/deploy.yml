name: Deploy to EC2

on:
  push:
    branches:
      - main
      - feature/deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get the app latest versions
        id: versions
        run: |
          # Récupération de la version du Front
          FRONT_VERSION_RESPONSE=$(curl -s https://api.github.com/repos/a-deux-pas/docker-a-deux-pas/releases/latest)
          echo "Front API response: $FRONT_VERSION_RESPONSE"

          FRONT_VERSION=$(echo "$FRONT_VERSION_RESPONSE" | jq -r '.tag_name // empty')

          # Si FRONT_VERSION n'est pas vide, appliquez la transformation
          if [[ -n "$FRONT_VERSION" ]]; then
            FRONT_VERSION=${FRONT_VERSION#v}  # Retire le 'v' au début si présent
          else
            echo "Erreur : tag_name pour le Front est vide ou non présent"
            exit 1
          fi

          # Récupération de la version du Back
          BACK_VERSION_RESPONSE=$(curl -s https://api.github.com/repos/a-deux-pas/docker-a-deux-pas/releases/latest)
          echo "Back API response: $BACK_VERSION_RESPONSE"

          BACK_VERSION=$(echo "$BACK_VERSION_RESPONSE" | jq -r '.tag_name // empty')

          # Si BACK_VERSION n'est pas vide, appliquez la transformation
          if [[ -n "$BACK_VERSION" ]]; then
            BACK_VERSION=${BACK_VERSION#v}  # Retire le 'v' au début si présent
          else
            echo "Erreur : tag_name pour le Back est vide ou non présent"
            exit 1
          fi

          # Enregistrement des versions dans les outputs de GitHub
          echo "FRONT_VERSION=$FRONT_VERSION" >> $GITHUB_OUTPUT
          echo "BACK_VERSION=$BACK_VERSION" >> $GITHUB_OUTPUT

      # Crée le répertoire .ssh si nécessaire
      # Ajoute la clé de l'hôte au fichier known_hosts
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          FRONT_VERSION: ${{ steps.versions.outputs.FRONT_VERSION }}
          BACK_VERSION: ${{ steps.versions.outputs.BACK_VERSION }}
        run: |
          scp docker-compose.yml ${USER}@${HOST}:~/app/
          ssh ${USER}@${HOST} '
            cd ~/app
            echo "FRONT_VERSION=${{ env.FRONT_VERSION }}" > .env
            echo "BACK_VERSION=${{ env.BACK_VERSION }}" >> .env
            docker-compose pull
            docker-compose up -d
          '
