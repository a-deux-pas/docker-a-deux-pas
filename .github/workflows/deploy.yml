name: Deploy to EC2

# Triggers the workflow via an external event with type 'new-release'
on:
  workflow_dispatch:
  repository_dispatch:
    types: [new-release]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get the app latest versions
        id: versions
        run: |
          # Conditional logic to set versions based on the type of application (front-end or back-end)
          if [[ "${{ github.event.client_payload.app }}" == "front-end" ]]; then
            echo "FRONT_VERSION=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
            BACK_VERSION=$(curl -s https://api.github.com/repos/a-deux-pas/back-a-deux-pas/releases/latest | jq -r '.tag_name | select(startswith("v"))')
            echo "BACK_VERSION=${BACK_VERSION#v}" >> $GITHUB_OUTPUT
          else
            FRONT_VERSION=$(curl -s https://api.github.com/repos/a-deux-pas/front-a-deux-pas/releases/latest | jq -r '.tag_name | select(startswith("v"))')
            echo "FRONT_VERSION=${FRONT_VERSION#v}" >> $GITHUB_OUTPUT
            echo "BACK_VERSION=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
          fi

      # Set up SSH configuration to enable secure communication with the EC2 instance
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # SSH into the EC2 instance and add the current user to the Docker group to manage Docker commands
      - name: Set Docker permissions on EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo usermod -aG docker $USER && newgrp docker'

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          FRONT_VERSION: ${{ steps.versions.outputs.FRONT_VERSION }}
          BACK_VERSION: ${{ steps.versions.outputs.BACK_VERSION }}
        run: |
          # Copy the Docker Compose file to the EC2 instance
          scp docker-compose.yml ${USER}@${HOST}:~/app/

          # SSH into the EC2 instance to perform deployment actions
          ssh ${USER}@${HOST} '
            cd ~/app

            # Create and populate the .env file with environment variables
            > .env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
            echo "FRONT_VERSION=${{ env.FRONT_VERSION }}" >> .env
            echo "BACK_VERSION=${{ env.BACK_VERSION }}" >> .env

            # Run Docker Compose commands
            docker-compose pull
            docker-compose -d
          '
