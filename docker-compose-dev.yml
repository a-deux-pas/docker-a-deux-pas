services:
  frontend:
    # Construction de l'image à partir du répertoire ./front avec le Dockerfile ciblant l'environnement de développement
    build:
      context: ../front-a-deux-pas
      target: dev 
      args:
        CONFIGURATION: development
    # Ajoute le conteneur front à un réseau personnalisé appelé front-back-network, 
    # pour faciliter la connexion et la communication entre les services frontend et backend
    networks:
      - front-back-network
    # Redirection du port 4200 du conteneur vers le port 4201 de l'hôte
    ports:
    # port_externe_au_container:port_dans_le_container
      - '4201:4200'
    # Fait le lien entre le répertoire local ./front et le répertoire /usr/src/app du conteneur
    volumes:
      - type: bind
        source: ../front-a-deux-pas
        target: /usr/src/app
    depends_on:
      - backend
    # Redémarrage automatique du service en cas d'échec
    restart: always

  backend:
    # Construction de l'image à partir du répertoire ./back avec le Dockerfile ciblant l'environnement de développement
    build:
      context: ../back-a-deux-pas
      target: dev
    # Redirection du port 8081 du conteneur vers le port 9003 de l'hôte
    ports:
      - "9003:8081"
    # Fait le lien entre le répertoire local ./back dans le répertoire /workspace/app du conteneur
    volumes:
      - ../back-a-deux-pas/:/workspace/app
    depends_on:
      - mysqldb
    # Redémarrage automatique du service en cas d'échec
    restart: always
    # Liaison aux réseaux spring-mysql-network et front-back-network
    networks:
      - spring-mysql-network
      - front-back-network
    # Variables d'environnement pour la connexion à la base de données MySQL
    environment:
      MYSQL_HOST: jdbc:mysql://mysqldb:3306/adeuxpas?createDatabaseIfNotExist=true
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: adeuxpas
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

  mysqldb:
    image: "mysql:8.2.0"
    # Montage du volume docker-mysql-volume dans /var/lib/mysql du conteneur pour persister les données MySQL
    volumes:
      - docker-mysql-volume:/var/lib/mysql
    # Redémarrage automatique du service en cas d'échec
    restart: always
    # Redirection du port 3306 du conteneur vers le port 3306 de l'hôte
    ports:
      - '3306:3306'
    expose:
      - 3306
    # Liaison au réseau spring-mysql-network
    networks:
      - spring-mysql-network
    # Variables d'environnement pour la configuration de MySQL
    environment:
      MYSQL_HOST: jdbc:mysql://localhost:3306/adeuxpas?createDatabaseIfNotExist=true
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: adeuxpas
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
# Définition du volume docker-mysql-volume
volumes:
  docker-mysql-volume:
# Définition des réseaux spring-mysql-network et front-back-network
networks:
  spring-mysql-network:
  front-back-network:
